{"version":3,"file":"static/js/95.88ab7565.chunk.js","mappings":"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","sources":["webpack://my-react-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWitHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-react-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-react-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/common/FormsControls/FormsControls.jsx","helpers/validators/validators.js","webpack://my-react-app/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\",\"contact\":\"ProfileInfo_contact__sQB8W\"};","import React, {useEffect, useState} from \"react\";\n\nconst ProfileStatusWitHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    },[props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStateChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode\n                ?\n                <div>\n                    <b>Status : </b><span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\n                </div>\n                :\n                <div>\n                    <input\n                        onChange={onStateChange} autoFocus={true} onBlur={deactivateEditMode}\n                        value={status || '------'}/>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatusWitHooks;","import React from \"react\";\nimport {reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport s from \"./ProfileInfo.module.css\";\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\nimport {required, validURL} from \"../../../helpers/validators/validators\";\n\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>}\n        <div>\n            <b>FullName </b> :\n            {createField('Full Name', 'fullName', [required], Input)}\n        </div>\n        <div>\n            <b>Looking For A Job </b> :\n            {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\n        </div>\n        <div>\n            <b>My Professional Skills </b> :\n            {createField('My Professional Skills', 'lookingForAJobDescription', [], Textarea)}\n        </div>\n        <div>\n            <b>About Me </b> :\n            {createField('About Me', 'aboutMe', [], Textarea)}\n        </div>\n        {<div>\n            <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                <b>{key} : {createField(key, 'contacts.' + key, [validURL], Input)}</b>\n            </div>\n        })}\n        </div>}\n        <div>\n            <button>Update</button>\n        </div>\n    </form>;\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\n\nexport default ProfileDataFormReduxForm;","import React, {useState} from \"react\";\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport userNoPhoto from '../../../assets/images/user.png';\nimport ProfileStatusWitHooks from \"./ProfileStatusWitHooks\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({isOwner, profile, status, updateStatus, savePhoto, saveProfile}) => {\n    let [editMode, setEditMode] = useState(false);\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const goToEditMode = () => {\n        setEditMode(true);\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmitProfileData = (formData) => {\n        saveProfile(formData)\n            .then(\n                () => {\n                    setEditMode(false);\n                }\n            );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img alt='avatar' src={(profile.photos && profile.photos.large) || userNoPhoto} className={s.mainPhoto}\n                     accept=\"image/*\"/>\n                {isOwner && <input type='file' onChange={onMainPhotoSelected}/>}\n                <ProfileStatusWitHooks status={status} updateStatus={updateStatus}/>\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmitProfileData}/>\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode}/>}\n            </div>\n        </div>\n    );\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div>\n            <button onClick={goToEditMode}>Edit</button>\n        </div>}\n        <div>\n            <b>FullName</b> : {profile.fullName}\n        </div>\n        <div>\n            <b>Looking For A Job</b> : {profile.lookingForAJob ? 'Yes' : 'No'}\n        </div>\n        <div>\n            <b>My Professional Skills</b> : {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : ''}\n        </div>\n        <div>\n            <b>About Me</b> : {profile.aboutMe ? profile.aboutMe : ''}\n        </div>\n        <div>\n            <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n        })}\n        </div>\n    </div>;\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b> : {contactValue}</div>;\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from \"react\";\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n\n    return (\n        <div className={s.item}>\n            <img alt='user-avatar'\n                src='https://static.vecteezy.com/system/resources/thumbnails/002/002/403/small/man-with-beard-avatar-character-isolated-icon-free-vector.jpg'/>\n\n            {props.message}\n\n            <div>\n                <span>like {props.likes_count}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import React from \"react\";\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../helpers/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nlet maxLength10 = maxLengthCreator(10);\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name='newPostText' component={Textarea} placeholder='Post Message'\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add Post</button>\n            </div>\n        </form>\n    );\n}\n\nconst AddNewPostReduxForm = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm);\n\nconst MyPosts = (props) => {\n\n    let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} id={p.id} message={p.message}\n                                                   likes_count={p.likesCount}/>);\n\n    let onAddPost = (formData) => {\n        props.addPost(formData.newPostText);\n    };\n\n    return (\n        <div className={s.postsBlock}>\n            <h2>My Posts</h2>\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n}\n\nexport default MyPosts;","import {addPostAC} from \"../../../redux/reducers/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch( addPostAC(newPostText))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <ProfileInfo\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from \"../../redux/reducers/profile-reducer\";\nimport {compose} from \"redux\";\nimport {withRouter} from \"../../helpers/functions/functions\";\nimport {Navigate} from \"react-router-dom\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.router.params.userId;\n        if (!userId) {\n            if (this.props.isAuth) {\n                userId = this.props.authorizedUserId;\n            }\n        }\n        if (userId) {\n            this.props.getUserProfile(userId);\n            this.props.getStatus(userId);\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.router.params.userId != prevProps.router.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n\n        if (!this.props.router.params.userId && !this.props.authorizedUserId) {\n            return <Navigate to=\"/login\"/>;\n        }\n\n        let isOwner = this.props.authorizedUserId &&\n            (!this.props.router.params.userId || this.props.router.params.userId == this.props.authorizedUserId)\n\n        return <Profile {...this.props}\n                        isOwner={isOwner}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateStatus={this.props.updateStatus}\n                        savePhoto={this.props.savePhoto}/>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        authorizedUserId: state.auth.userId\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n)(ProfileContainer);","import s from './FormsControls.module.css';\nimport {Field} from \"redux-form\";\n\nconst TagElement = TagElement => ({input, meta, ...props}) => {\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div>\n                <TagElement {...input} {...props} />\n            </div>\n            {hasError && <span> {meta.error} </span>}\n        </div>\n    );\n};\n\nexport const Textarea = TagElement(\"textarea\");\n\nexport const Input = TagElement(\"input\");\n\nexport const createField = (placeholder, name, validators, component, props = {}, text = '') => {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        />\n    </div>\n\n}\n\n","export const required = value => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = maxLength => (value) => {\n    if (value && value.length > maxLength) return `Max Length is ${maxLength} symbols`;\n    return undefined;\n}\n\nexport const minLengthCreator = minLength => (value) => {\n    if (value && value.length < minLength) return `Min Length is ${minLength} symbols`;\n    return undefined;\n}\n\nexport const validURL = value => {\n    let pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    if (value && !pattern.test(value)) return `Invalid url format`;\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__NR1bV\",\"error\":\"FormsControls_error__wukgD\",\"formSummaryError\":\"FormsControls_formSummaryError__Rdvzq\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","required","Input","type","Textarea","Object","keys","contacts","map","key","s","validURL","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","alt","src","photos","large","userNoPhoto","accept","target","files","length","initialValues","formData","then","message","likes_count","maxLength10","maxLengthCreator","AddNewPostReduxForm","Field","name","component","placeholder","validate","postsElements","posts","reverse","p","id","likesCount","addPost","newPostText","connect","state","profilePage","dispatch","addPostAC","MyPosts","ProfileContainer","userId","this","router","params","isAuth","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","to","React","compose","auth","withRouter","TagElement","input","meta","hasError","touched","validators","maxLength","minLengthCreator","minLength","pattern","RegExp","test"],"sourceRoot":""}